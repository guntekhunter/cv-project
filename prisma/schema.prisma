// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model user {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  email     String   @unique
  password  String
  Cv        Cv?
}

model Cv {
  id              Int              @id @default(autoincrement())
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  user            user             @relation(fields: [user_id], references: [id])
  user_id         Int              @unique
  personal_data   PersonalData?
  organisation    Organisation[]
  work_experience WorkExperience[]
  education       Education[]
  other           Other[]
}

model SocialMedia {
  id               Int          @id @default(autoincrement())
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  name             String
  link_or_number   String
  user             PersonalData @relation(fields: [personal_data_id], references: [id])
  personal_data_id Int
}

model PersonalData {
  id                   Int           @id @default(autoincrement())
  createdAt            DateTime      @default(now())
  updatedAt            DateTime      @updatedAt
  link                 String
  portfolio            String
  address              String
  professional_summary String
  photo                String
  name                 String
  vc                   Cv            @relation(fields: [cv_id], references: [id])
  cv_id                Int           @unique
  social_media         SocialMedia[]
}

model Organisation {
  id                Int       @id @default(autoincrement())
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  organisation_name String
  address           String
  division          String
  type              String
  responsibility    String
  order_index       Int @default(0)
  start_date        DateTime?
  end_date          DateTime?
  cv                Cv        @relation(fields: [cv_id], references: [id])
  cv_id             Int
}

model WorkExperience {
  id                  Int       @id @default(autoincrement())
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  company_name        String
  company_address     String
  responsibility      String
  company_description String
  job_type            String
  order_index       Int @default(0)
  start_date          DateTime?
  end_date            DateTime?
  cv                  Cv        @relation(fields: [cv_id], references: [id])
  cv_id               Int
}

model Education {
  id             Int       @id @default(autoincrement())
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  school_name    String
  major          String
  ipk            String
  education_type String
  school_address String
  start_date     DateTime?
  end_date       DateTime?
  cv             Cv        @relation(fields: [cv_id], references: [id])
  cv_id          Int
}

model Other {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  type      String
  name      String
  year      String
  cv        Cv       @relation(fields: [cv_id], references: [id])
  cv_id     Int
}
